<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Molina&#39;s tech diary on Molina&#39;s Tech diary</title>
    <link>http://blog.molina.jp/</link>
    <description>Recent content in Molina&#39;s tech diary on Molina&#39;s Tech diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>js-JP</language>
    <lastBuildDate>Tue, 20 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.molina.jp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Windowsの便利機能</title>
      <link>http://blog.molina.jp/blog/windows%E3%81%AE%E4%BE%BF%E5%88%A9%E6%A9%9F%E8%83%BD/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.molina.jp/blog/windows%E3%81%AE%E4%BE%BF%E5%88%A9%E6%A9%9F%E8%83%BD/</guid>
      <description>この記事は rogy Advent Calendar 2019 の3日目の記事です.
なんか書く人が少ないようなのでレベルの低い記事を書いて敷居を下げていこうと思う次第です.
さて, 世の中にはWindowsというOSがあります. 一般的には広く使われているようですが, 技術系の界隈では必ずしもそうではないようです？[要出典]
Linuxと比較するとカスタマイズ性が低い(というかめんどくさい)とか, プログラミングの環境構築が大変とかでよくクソと言われがちなWindowsですが, 場合によってはWindowsを使わざるを得ないこともあるかと思います.
例えば代表的な3DCADソフトはWindowsでしか動かなかったり, 授業のレポートの拡張子が.docxで指定されていたり, 研究室のスライド資料がPowerPointだったり……　え？PowerPointを強制してくるﾌﾞﾗｯｸﾗﾎﾞなんてやめてしまえって？ 確かに PowerPointの強要ってﾊﾟﾜﾊﾗにならんのかなぁ(パワーポイントハラスメント)
まぁそういう冗談はおいておいて, どうせ使うなら快適に使いたいですね. WindowsもWindows10になってから少しずつではありますが, 意外と便利な機能が追加されていたりします. 今回はその中から自分が便利かなと思ったものを取り上げて紹介したいと思います.
OneDriveの同期機能 OneDriveはマイクロソフトのオンラインストレージサービスですが, Windowsは標準でこのOneDriveと同期するソフトウェアが整っています. そのため, OneDriveのバックアップ設定でバックアップを有効にしておくと, 勝手にデスクトップ, ドキュメント, 画像のフォルダとファイルをオンラインにバックアップしてくれます. 指定したフォルダやファイルだけバックアップすることも可能です. また, 直近であればブラウザ上でファイル単位で過去のバージョンにアクセスすることもできます.
また, 従量課金制ネットワークに接続している時は同期を停止する機能があり, テザリングなどでインターネットに繋いでいるときに余計な同期をしなくて便利です. また, 使用するファイルだけダウンロードして使うファイルオンデマンドという機能もあり, ストレージに余裕がないPCでも安心です.
個人的には複数PC間で意識することなくデーターを同期できるのが便利で非常によく使っています．
クリップボードの履歴 いわゆる「コピペ」をするときに使われるクリップボードですが, 通常であれば1つのデータ(テキストや画像)しかクリップボードに記録することができませんでした. しかし「October 2018 Update」からクリップボードの機能が大幅に拡張されました. 具体的には, [Win]+[V]でクリップボードの履歴にアクセスできるようになりました. これによって, 複数のデータをコピーして貼り付けるといったことが可能になります. ﾌﾟﾖｸﾞﾔﾑとかするときに便利そうですね(適当).
また, デバイス間の同期もできるようになりました. PC1で調べ物をして, 良さそうな文章なりを見つけたときにPC1でコピーすると, 同期設定しているPC2のエディタなりに貼り付けすることができます. PCを複数台同時に使うことがよくある自分にとっては非常に便利な機能です.
これらの設定は[設定]-[システム]-[クリップボード]で設定できます.
スクリーンショット Windowsのスクリーンショットはかなり機能が貧弱でしたが, 「Windows 10 October 2018 Update」で強化されました. [Win]+[Shift]+[S]で, 範囲選択をしてスクリーンショットを撮ることができます.</description>
    </item>
    
    <item>
      <title>RaspberryPiでDockerを使ってみた話</title>
      <link>http://blog.molina.jp/blog/raspberrypi%E3%81%A7docker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.molina.jp/blog/raspberrypi%E3%81%A7docker%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E8%A9%B1/</guid>
      <description>以前の記事でRaspberry Piでブログを作ろうとしてやめたみたいな話をちらっとしたんですが, それについて具体的に書きたいと思います.
Raspberry Piとは Raspberry Piは英国のRaspberry Pi財団によって設計された, ARMプロセッサのシングルボードコンピュータです. 「コンピューターと電子工作を世界中の人の手に」という理念の元に開発されているため, 価格が安く, インターフェイスが充実していることが特徴です. ストレージはMicroSDカード, 映像出力はHDMI(テレビにつなぐことが前提らしい), 電源供給はUSB端子, 入力インターフェイスはUSBポートからと, 一般家庭にあるもので済ますことができるので, 本体を買えばすぐに使い始めることができるというのが売りのようです (個人的にはテレビや外付けキーボード, マウスがない家も普通にあるのではと思ってしまいますが).
そのため, 比較的初心者でも手が出しやすく, 色々遊べるので人気のようです. インターネットを漁れば, 「Raspberry Piで〇〇やってみた！」といった記事はたくさん見つかりますし, 入門書もたくさん売られているようなので, ちょっとものつくりやってみようという人には丁度いいんじゃないでしょうか.
僕も価格の安さと使っている人の多さに惹かれ, とりあえずサーバー立てようかなくらいの気持ちでRaspberry Piを購入しました.
サーバー入門 とりあえずRaspberry Pi上で何かサービスを動かして, それを外部からアクセスできるようにすればサーバー完成です.(雑)
例えば, Webサーバーなら, クライアントからのリクエストに応じてWebページを配信するわけですし, メールサーバーならメールを送信したり受信したりする機能を提供します.
これらの機能を提供するために, サーバーとなるコンピュータに様々な設定をしたり, サーバーアプリを導入したりします.
なので, やりたいサービスに応じてサーバーアプリをインストールしていけばいいのですが, 複数のアプリを立ち上げると重くなったり, アプリ同士が干渉してしまう可能性があります. そのため, 最近はDockrという仮想環境にサーバーを構築するのが流行っている？ようです.
Dockerとは DockerはDocker社が開発しているコンテナ型の仮想環境を構築するためのプラットフォームです.
仮想環境というと, よくVirtualBoxなどの仮想マシンが挙げられますが, 仮想マシンはホストマイン上でゲストOSを起動してその上でミドルウェアを動かしているのに対して, DockerはカーネルはホストOSを利用し, プロセスやユーザーなどを隔離することで, 軽量で高速であるという特徴があります.
また, Dockerはミドルウェアのインストールや環境設定をコード化して管理しているため, スクラップ&amp;amp;ビルドが容易で, 作成した環境の移行など簡単にできるという利点があります.
今回自分は, 将来的にサーバーを移行することも考えて, Raspberry Pi上にDockerをインストールし, そこにサーバアプリをインストールすることにしました.
Raspberry Piのアーキテクチャ 突然ですが, コンピュータには命令セットアーキテクチャというものがあります. これはソフトウェアとハードウェア間のインターフェイスの定義です.</description>
    </item>
    
    <item>
      <title>大工大交流会に参加した</title>
      <link>http://blog.molina.jp/blog/%E5%A4%A7%E5%B7%A5%E5%A4%A7%E4%BA%A4%E6%B5%81%E4%BC%9A%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.molina.jp/blog/%E5%A4%A7%E5%B7%A5%E5%A4%A7%E4%BA%A4%E6%B5%81%E4%BC%9A%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F/</guid>
      <description>先日, 大阪工業大学で行われたロボコンの技術交流会に参加してきました.
↓これ
技術交流会2019の案内と受付です。
form締め切りは8月25日までです！
発表してくれる方、募集しています！https://t.co/yMvUjOBeFg pic.twitter.com/SHOhXnbiDn
&amp;mdash; 大阪工業大学 ロボットプロジェクト (@OIT_RoboPro) August 20, 2019 
技術交流会について 技術交流は競技全体のレベルアップには非常に重要ですが, そのような機会は限られます.
特にNHKロボコンの場合は毎年ルールが変わるという性質上, アイディアが勝敗を分ける重要な要素となります. そのため, シーズン中は他チーム間の交流を行いにくいという問題があります(単純にシーズン中は忙しいので交流会をやっている暇はないという事情もありますが).
しかし, 大会が終わってシーズンが終われば, 大学によっては大学間の交流が行われることも多くあります. このような交流会は2つの大学間で行われることがほとんどですが, 最近は多数の大学が集まって交流を行う機会も増えてきました.
大工大の交流会は2年前くらいに始まって, 始まった当初は回路交流会だけだったのですが, 徐々に対象が広がり, 今年は全分野が対象になりました. また, NHK学生ロボン以外にも, 高専ロボコンやレスキューロボコン参加者など, 広く様々な人と交流できるのも大きな特徴かと思います.
発表内容 自分はNHKロボコンでは主に機械を担当してきたので, 主に機械についての発表をしました.
テーマは2つあって, 1つはスケジューリング, もう1つは機械のレイヤ分け, 抽象化の話です.
スケジューリングについて NHKロボコンは他のロボコンと比べるとスケジュールが非常にタイトです. というのも, 競技のルールが毎年完全に変わってしまうのと, ルール発表から競技まで9ヶ月ほどしかないためです. 「間に合わなかったら今年は出るのは見合わせて来年に延ばせばいいや」というのが通用しないわけですね.
したがって, スケジューリングをしっかりすることが結果を出すために非常に重要な要素となります. 逆にここをしっかりすれば成績が上がる大学もたくさんあるのではないかと考えて, 今回の発表に加えました.
機械のレイヤ分け, 抽象化について これもNHKロボコンが1年毎に大きくルールが変わってくることに由来するのですが, NHKは機械の交流で得たことを活かすのが非常に難しいです. なぜってある機構を見て「なるほど, この機構頭いいな」と思ってもルールが変わるので多くの場合その機構を使うことはもうありません. 結局得たものを活かす機会があまりないわけですね.
そこで, 交流会で得たことや, 過去の自チームの経験を活かす方法の1つとして, レイヤ分けと抽象化を紹介しました.
汎用性のある形にレイヤ分けと抽象化ができれば過去の知見を活かしやすくなります. 「頭いい」と思った理由や, その特徴を分析して再利用可能な形に抽象化した状態に落とし込むということです. 今回はそのことについて例を交えながら説明しました.
とはいえ, レイヤ分けと抽象化は難しい作業ですし, 取り入れてすぐに結果が出てくるものではないですが……　まぁ長い目で見て数年後に結果が出ればよいのではないでしょうか.</description>
    </item>
    
    <item>
      <title>Netlifyで記事の公開</title>
      <link>http://blog.molina.jp/blog/netlify%E3%81%A7%E8%A8%98%E4%BA%8B%E3%81%AE%E5%85%AC%E9%96%8B/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.molina.jp/blog/netlify%E3%81%A7%E8%A8%98%E4%BA%8B%E3%81%AE%E5%85%AC%E9%96%8B/</guid>
      <description>前回の記事でHugoでサイトを作るところまで書きましたが, 今回は実際に公開するところまでを書こうと思います.
ブログを公開する方法 Hugoなどの静的サイトジェネレーターで生成したブログを公開するには, いくつか方法があります.
自分のサーバーに置く 自分のサーバーを持っているのならば, ビルドしたファイル群をそこにおいてやって外部からアクセスできるようにすれば良いです. ApacheとかNginxとかで簡単に設定できます. まぁ, 自分のサーバー持ってる人なら説明するまでもない気がしますが……
ホスティングサービスを利用する とりあえずページを公開したいけどわざわざサーバーを借りるほどでもないかなぁという時には外部のホスティングサービスを使うという方法があります. 個人で使用する程度であれば, 無料で使えるホスティングサービスがいくつかあるので, それらを使えば手軽にブログを公開できます.
例えば, GitHub PagesとかGitLab Pagesを使えば, 簡単にサイトを公開できますし. やっている人もたくさんいるので調べれば情報が出てきます.
今回はその中で, Netlifyというホスティングサービスを利用しました.
Netlifyの特徴 公式サイトの説明から適当に引用してくると
 GitHub/GitLab/Bitbucketと連携して指定したブランチが更新されれば自動でbuild, deployまでしてくれる 無料プランでも独自ドメインを使用可能 難しい設定なしで自動でLet&amp;rsquo;s Encryptによるhttps証明書発行が可能 フォームなども設置可能  あたりが挙げられます. 無料プランでも一ヶ月あたりの転送量は100Gまで利用可能で, 個人で使用するぶんには十分でしょう(たぶん).
方法 前準備 公開したいサイトのプロジェクトフォルダをGitHub/GitLab/Bitbucketにpushします.
Netlifyにログイン 登録がまだの場合は登録して, ログインします. GitHub/GitLab/Bitbucketのアカウントで登録できます.
Gitリポジトリと連携 ログインすると, 右の方に「New site from Git」ボタンがあるのでクリックします.  すると連携可能なサービスが出てくるので, 自分の使うサービスをクリックします. Gitログインすると, どのリポジトリと連携するか聞かれるので, 自分のサイトのリポジトリを選択します.
Webサイトを設定 サイトの設定をします. もうすでにビルドが終わってソースコードがある場合は, そのフォルダを設定します. (例:publicなど)
HugoやGarsbyなどを使っている場合は, Netlify側でビルドすることもできます. ビルドコマンドはHugoの場合はhugoでいけました.
公開内容を確認 以上でサイトの公開は終了です. 初期のままだと初期ドメインが変なので, Site settingsからSite nameを変更すれば好きなドメインにすることができます.</description>
    </item>
    
    <item>
      <title>Hugoでブログ的なものを作る</title>
      <link>http://blog.molina.jp/blog/hugo%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E7%9A%84%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.molina.jp/blog/hugo%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E7%9A%84%E3%81%AA%E3%82%82%E3%81%AE%E3%82%92%E4%BD%9C%E3%82%8B/</guid>
      <description>とりあえずHugoでブログを作ったのでその記録を残しておきます.
Hugoとは 静的サイトジェネレーターの1つです. 静的サイトジェネレーターについて詳しくはggってください. めちゃくちゃ雑に説明するとホームページをhtml + css + JavaScriptでいい感じに作れるものです.
静的サイトジェネレーターにはいろいろ種類がありますが, 公式サイト曰くHugoはビルドが速いそうです. Go言語で作られているらしい. ちょっと調べた感じあんまりテーマはそこまで豊富でないのかな. まぁいいや. 別にHugoにこだわりはなかったんですが, 自分の周りにHugoを使ってる人が多かったのもあってHugoにしました. 何か困ったときに周りに聞ける人がいるの大事.
環境構築 Ubuntu apt installで入ると思います. そんなに苦労しなかったので特に説明しません. おしまい. gitが入ってない場合はgitも入れておくことをおすすめします. こちらもapt installで入ると思います.
Windows なんかchocolateyとかScoopとか使えばコマンドで入るらしいですね. 面白そうなので今度試してみよう.
とりあえず情弱Windowsユーザーなので手動で入れます. 64bit前提で話をすすめます.
まず, 公式のgithubからhugo_extended_0.57.2_Windows-64bit.zip を落としてきます. 別にextendedじゃないやつでもいいんですけど動かないテーマがあったりするので特に理由がなければextendedをおすすめします.
次に, 落としてきたzipファイルを展開します. 展開先はどこでもいいですが, Cドライブ直下あたりがいいんじゃないでしょうか. 自分はCドライブ直下に新たにhugoというフォルダを作ってそこに中身のファイルを展開しました. 以下, C:\hugoにhugo.exeがあるという前提で話を進めます.
ファイルの展開が終わったらパスを通します. パスを通すってなんぞやって人はここを読むと良いと思います. https://proengineer.internous.co.jp/content/columnfeature/5205
具体的な作業としては, システムの詳細設定の画面を開きます. スタートメニューの検索窓で「システムの詳細設定」とでも打てば出てくると思います. そこの右下にある「環境変数」をクリック  環境変数の「Path」を選択し編集をクリックします.  新規をクリックすると新しいパスを入力できるようになるので, 「hugo.exe」をおいてあるパス(自分の場合はC:\hugo)を入力してOKをします.  これでパスは通っているはずなんですが, Windowsは気まぐれなので再起動しないと通ってないことがあります(通っていたと思いきや途中で通らなくなることもあります). 再起動することをおすすめします.
とりあえず再起動が終わったらコマンドプロンプトとかを開いてちゃんとインストールできてるか確認します. ところで最近, Microsoftはコマンドプロンプトの代わりにWindowsPowerShellを推しているようですね. 右クリックメニューからコマンドプロンプトが消えててびっくりしてしまった. まぁ今回はどっちでやってもいいと思います.
コマンドプロンプトを開きたい場合は, スタートメニューの検索窓で「コマンドプロンプト」と入力するとコマンドプロンプトが開きます. コマンドプロンプトに
hugo version  と入力してバージョン番号が表示されたら成功です.</description>
    </item>
    
    <item>
      <title>ブログを始めてみました</title>
      <link>http://blog.molina.jp/blog/my-first-post/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.molina.jp/blog/my-first-post/</guid>
      <description>こんにちは Molinaです.
ブログを作りました. 日々の出来事を綴っていこうと思います.
動機 昔から自分から情報を発信しようという気持ちはあったのですが, あまりネットに恵まれていない時期があったこともあって特に何もすることなく時が過ぎて行きました.
最近, 学ロボを引退したこともあって時間ができ, とりあえずブログなるものを作ってみるかぁという気持ちになったので作りました.
まぁいろいろ書いていきたいと思います.
とりあえずこのブログを作るまでの経緯とか.
ブログをはじめようとする ブログをやるにはいくつか選択肢があると思いますが, 大きく分けると
 ブログが書ける外部のサービスを利用する 自分でホームページなりを作って公開する  となると思います. 要するに自分でやるか外部のサービスを利用するかという分け方です.
別に情報発信するだけなら外部のサービスを使えばいいんですが, あんまり融通が効かなさそうなイメージ(レイアウトとか広告とか)があったのと, 移行したくなったときにめんどくさそうだなぁというのがあって個人的にはあまり惹かれませんでした.
あと個人的にはサーバーを立ててみたいというのがあったので, 自分でサーバーを建ててWordpressでも動かすかぁという感じで考えていました.
とりあえずサーバーを建ててみる ところで世の中にはRaspberry Piというのがあって, これを使ってサーバーを立てる人が一定数いるという話を耳に挟んだので自分もRaspberry Piを購入してサーバーを立ててみました.
なんか無限につまずいたんですがとりあえずWordpressを立てる事はできました.
ここらへんの話はまた気が向いたら書こうかと思います.
で, Wordpressを立てて弄ってみたんですがあんまりしっくり来ませんでした. 簡単に作れるのはいいんですが更新とかめんどくさい. 更新失敗して一回破壊しかけたし.
なんか調べていると最近は静的サイトジェネレーターでブログを作っているのが流行っている？っぽいのでこれを試して見ようと思いました.
Hugoでサイトを作る とりあえずHugoで作ってみました.
なぜHugoにしたかというと名前を聞いたことがあったのと, それなりにユーザーがいそうであること, あとはコンパイルが速い(らしい)ことあたりですかね. そこまでHugoにこだわりがあるわけじゃないです. まぁ別に困ったときにググったら情報がある程度出てくるなら何でもいいと思います.
具体的な環境構築とかは別の記事に書こうと思います.
公開 せっかくサーバー立てたのでそこで公開しても良かったんですが, とりあえず今流行っているらしいNetlifyで公開しました. まぁ, 引っ越すのもそんな大変じゃないだろうしなんかあったら引っ越すかもしれません.
自分のサーバーで公開しなかったのには今後サーバー管理をどうしていくか微妙であるというのがあります. ラズパイ, ブログ置いとくくらいなら別に大したことじゃないですが, 今後色々動かしていくにはスペックが貧弱すぎないかなぁという気持ちですね.
サーバー用にもっと強いPCを用意するのも無しではないけれど, ネットで色々調べてみると, 自宅でサーバー運営するのリスクしかないなぁと. 火事になるリスクが割とありますし.
電気代とかサーバー用のPC用意するとか考えると費用の点からもVPSでも借りるのがいいんだろうけど, まだあまり考えが固まっていないのでもうちょっと考えてから決めようかなぁ………</description>
    </item>
    
  </channel>
</rss>